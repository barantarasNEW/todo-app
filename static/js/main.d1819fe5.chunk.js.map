{"version":3,"sources":["types/Links.ts","Components/NewTodo/NewTodo.tsx","context.ts","Components/TodoItem/TodoItem.tsx","Components/TodoList/TodoList.tsx","Components/Filters/Filters.tsx","Components/Footer/Footer.tsx","utils/filterTodos.ts","hooks/useLocaleStorage.ts","App.tsx","index.tsx"],"names":["Links","NewTodo","createNewTodo","useState","value","setValue","onSubmitHandle","e","preventDefault","length","onSubmit","type","data-cy","className","placeholder","onChange","event","target","onBlur","Context","createContext","TodoItem","todo","id","title","completed","editRef","useRef","isEdit","setIsEdit","useContext","updateTodo","removeTodo","useEffect","current","focus","changeTitle","cancel","cn","editing","checked","htmlFor","onDoubleClick","aria-label","onClick","ref","onKeyDown","key","TodoList","todos","TransitionGroup","map","CSSTransition","timeout","classNames","filters","href","ALL","ACTIVE","COMPLETED","activeClass","isActive","selected","Filters","to","Footer","activeTodos","completedTodos","removeAllCompleted","filterTodos","filter","App","initialValue","storage","localStorage","getItem","JSON","parse","setItem","stringify","useLocaleStorage","setTodos","pathname","useLocation","useCallback","newTodo","Date","currTodos","currTodo","visibleTodos","useMemo","isAllCompleted","changeAllTodo","Provider","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d1819fe5.chunk.js","sourcesContent":["export enum Links {\n  ALL = '/',\n  COMPLETED = '/completed',\n  ACTIVE = '/active',\n}\n","import {\n  ChangeEvent,\n  useState,\n  FormEvent,\n  FocusEvent,\n} from 'react';\n\ntype Props = {\n  createNewTodo: (value: string) => void;\n};\n\nconst NewTodo: React.FC<Props> = ({ createNewTodo }) => {\n  const [value, setValue] = useState('');\n\n  const onChangeHandle = (event: ChangeEvent<HTMLInputElement>) => (\n    setValue(event.target.value)\n  );\n\n  const onSubmitHandle = (e: FormEvent | FocusEvent) => {\n    e.preventDefault();\n\n    if (!value.length) {\n      return;\n    }\n\n    createNewTodo(value);\n    setValue('');\n  };\n\n  return (\n    <form onSubmit={onSubmitHandle}>\n      <input\n        type=\"text\"\n        data-cy=\"createTodo\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={value}\n        onChange={onChangeHandle}\n        onBlur={onSubmitHandle}\n      />\n    </form>\n  );\n};\n\nexport default NewTodo;\n","import { createContext } from 'react';\nimport { ContextType } from './types/ContextType';\n\nexport const Context = createContext<ContextType | null>(null);\n","import {\n  ChangeEvent,\n  useState,\n  KeyboardEvent,\n  useContext,\n  useRef,\n  useEffect,\n} from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { Context } from '../../context';\nimport { ContextType } from '../../types/ContextType';\n\ntype Props = {\n  todo: Todo;\n};\n\nconst TodoItem: React.FC<Props> = ({\n  todo: {\n    id,\n    title,\n    completed,\n  },\n  todo,\n}) => {\n  const editRef = useRef<HTMLInputElement>(null);\n  const [value, setValue] = useState(title);\n  const [isEdit, setIsEdit] = useState(false);\n  const { updateTodo, removeTodo } = useContext(Context) as ContextType;\n\n  useEffect(() => {\n    if (isEdit) {\n      editRef.current?.focus();\n    }\n  }, [isEdit]);\n\n  const changeTitle = (cancel?: boolean) => {\n    if (!value.length || cancel) {\n      setValue(title);\n    } else {\n      updateTodo({ ...todo, title: value });\n    }\n\n    setIsEdit(false);\n  };\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const onKeyboard = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Escape') {\n      changeTitle(true);\n    }\n\n    if (e.key === 'Enter') {\n      changeTitle();\n    }\n  };\n\n  const onChangeStatus = () => {\n    updateTodo({ ...todo, completed: !completed });\n  };\n\n  return (\n    <li className={cn({ completed, editing: isEdit })}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id=\"toggle-view\"\n          checked={completed}\n          onChange={onChangeStatus}\n        />\n        <label\n          htmlFor=\"toggle\"\n          onDoubleClick={() => setIsEdit(true)}\n        >\n          {value}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          aria-label=\"destroy\"\n          onClick={() => removeTodo(id)}\n        />\n      </div>\n      {isEdit && (\n        <input\n          ref={editRef}\n          type=\"text\"\n          className=\"edit\"\n          value={value}\n          onChange={onChange}\n          onKeyDown={onKeyboard}\n          onBlur={() => changeTitle()}\n        />\n      )}\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import {\n  CSSTransition,\n  TransitionGroup,\n} from 'react-transition-group';\nimport { Todo } from '../../types/Todo';\nimport TodoItem from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[];\n};\n\nconst TodoList: React.FC<Props> = ({ todos }) => (\n  <ul className=\"todo-list\" data-cy=\"todosList\">\n    <TransitionGroup>\n      {todos.map(todo => (\n        <CSSTransition\n          key={todo.id}\n          timeout={300}\n          classNames=\"item\"\n        >\n          <TodoItem todo={todo} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  </ul>\n);\n\nexport default TodoList;\n","import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Links } from '../../types/Links';\n\nconst filters = [\n  { href: Links.ALL, title: 'All' },\n  { href: Links.ACTIVE, title: 'Active' },\n  { href: Links.COMPLETED, title: 'Completed' },\n];\n\nconst activeClass = ({ isActive }: { isActive: boolean }) => cn(\n  { selected: isActive },\n);\n\nconst Filters = () => (\n  <ul className=\"filters\">\n    {filters.map(({ href, title }) => (\n      <li key={href}>\n        <NavLink\n          to={href}\n          className={activeClass}\n        >\n          {title}\n        </NavLink>\n      </li>\n    ))}\n  </ul>\n);\n\nexport default Filters;\n","import Filters from '../Filters/Filters';\n\ntype Props = {\n  activeTodos: number;\n  completedTodos: number;\n  removeAllCompleted: () => void;\n};\n\nconst Footer: React.FC<Props> = ({\n  activeTodos,\n  completedTodos,\n  removeAllCompleted,\n}) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\" data-cy=\"todosCounter\">\n      {`${activeTodos} ${activeTodos === 1 ? 'item' : 'items'} left`}\n    </span>\n\n    <Filters />\n\n    {!!completedTodos && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={removeAllCompleted}\n      >\n        Clear completed\n      </button>\n    )}\n  </footer>\n);\n\nexport default Footer;\n","import { Links } from '../types/Links';\nimport { Todo } from '../types/Todo';\n\nexport function filterTodos(todos: Todo[], filter: string) {\n  switch (filter) {\n    case Links.ACTIVE:\n      return todos.filter(todo => !todo.completed);\n    case Links.COMPLETED:\n      return todos.filter(todo => todo.completed);\n    default:\n      return todos;\n  }\n}\n","import { useEffect, useState } from 'react';\n\nexport const useLocaleStorage = <T>(initialValue: T, key: string) => {\n  const getValue = () => {\n    const storage = localStorage.getItem(key);\n\n    if (storage) {\n      return JSON.parse(storage);\n    }\n\n    return initialValue;\n  };\n\n  const [value, setValue] = useState(getValue);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value, setValue]);\n\n  return [value, setValue];\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport { useLocation } from 'react-router-dom';\nimport React, {\n  useMemo,\n  useCallback,\n} from 'react';\nimport NewTodo from './Components/NewTodo/NewTodo';\nimport { Todo } from './types/Todo';\nimport TodoList from './Components/TodoList/TodoList';\nimport Footer from './Components/Footer/Footer';\nimport { filterTodos } from './utils/filterTodos';\nimport { useLocaleStorage } from './hooks/useLocaleStorage';\nimport { Context } from './context';\nimport { Links } from './types/Links';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useLocaleStorage<Todo[]>([], 'todos');\n  const { pathname } = useLocation();\n\n  const createNewTodo = useCallback((value: string) => {\n    const newTodo = {\n      id: +new Date(),\n      title: value,\n      completed: false,\n    };\n\n    setTodos((currTodos: Todo[]) => ([...currTodos, newTodo]));\n  }, []);\n\n  const updateTodo = useCallback((todo: Todo) => {\n    setTodos((currTodos: Todo[]) => currTodos.map(currTodo => {\n      if (currTodo.id === todo.id) {\n        return todo;\n      }\n\n      return currTodo;\n    }));\n  }, []);\n\n  const removeTodo = useCallback((id: number) => {\n    setTodos((currTodos: Todo[]) => currTodos\n      .filter(currTodo => currTodo.id !== id));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return filterTodos(todos, pathname);\n  }, [todos, pathname]);\n\n  const activeTodos = useMemo(() => {\n    return filterTodos(todos, Links.ACTIVE);\n  }, [todos]);\n\n  const completedTodos = useMemo(() => {\n    return filterTodos(todos, Links.COMPLETED);\n  }, [todos]);\n\n  const isAllCompleted = completedTodos.length === todos.length;\n\n  const changeAllTodo = useCallback(() => {\n    setTodos((currTodos: Todo[]) => currTodos.map(currTodo => {\n      if (currTodo.completed === !isAllCompleted) {\n        return currTodo;\n      }\n\n      return { ...currTodo, completed: !isAllCompleted };\n    }));\n  }, [isAllCompleted]);\n\n  const removeAllCompleted = useCallback(() => {\n    setTodos((currTodos: Todo[]) => currTodos.filter(currTodo => {\n      return !currTodo.completed;\n    }));\n  }, []);\n\n  return (\n    <div className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <NewTodo createNewTodo={createNewTodo} />\n      </header>\n\n      {!!todos.length && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              data-cy=\"toggleAll\"\n              checked={isAllCompleted}\n              onChange={changeAllTodo}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n            <Context.Provider value={{ updateTodo, removeTodo }}>\n              <TodoList todos={visibleTodos} />\n            </Context.Provider>\n          </section>\n\n          <Footer\n            activeTodos={activeTodos.length}\n            completedTodos={completedTodos.length}\n            removeAllCompleted={removeAllCompleted}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\nimport './styles/todoTransition.css';\n\nimport { App } from './App';\n\nconst root = createRoot(document.getElementById('root') as HTMLElement);\n\nroot.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n);\n"],"sourceRoot":""}